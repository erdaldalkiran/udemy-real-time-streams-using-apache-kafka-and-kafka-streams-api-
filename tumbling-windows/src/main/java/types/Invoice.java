/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Invoice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3053073155375390797L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Invoice\",\"namespace\":\"types\",\"fields\":[{\"name\":\"Number\",\"type\":\"int\"},{\"name\":\"CreatedTime\",\"type\":\"string\"},{\"name\":\"TotalAmount\",\"type\":\"double\"},{\"name\":\"StoreID\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Invoice> ENCODER =
      new BinaryMessageEncoder<Invoice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Invoice> DECODER =
      new BinaryMessageDecoder<Invoice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Invoice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Invoice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Invoice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Invoice>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Invoice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Invoice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Invoice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Invoice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int Number;
   private java.lang.CharSequence CreatedTime;
   private double TotalAmount;
   private java.lang.CharSequence StoreID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Invoice() {}

  /**
   * All-args constructor.
   * @param Number The new value for Number
   * @param CreatedTime The new value for CreatedTime
   * @param TotalAmount The new value for TotalAmount
   * @param StoreID The new value for StoreID
   */
  public Invoice(java.lang.Integer Number, java.lang.CharSequence CreatedTime, java.lang.Double TotalAmount, java.lang.CharSequence StoreID) {
    this.Number = Number;
    this.CreatedTime = CreatedTime;
    this.TotalAmount = TotalAmount;
    this.StoreID = StoreID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Number;
    case 1: return CreatedTime;
    case 2: return TotalAmount;
    case 3: return StoreID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Number = (java.lang.Integer)value$; break;
    case 1: CreatedTime = (java.lang.CharSequence)value$; break;
    case 2: TotalAmount = (java.lang.Double)value$; break;
    case 3: StoreID = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Number' field.
   * @return The value of the 'Number' field.
   */
  public int getNumber() {
    return Number;
  }


  /**
   * Sets the value of the 'Number' field.
   * @param value the value to set.
   */
  public void setNumber(int value) {
    this.Number = value;
  }

  /**
   * Gets the value of the 'CreatedTime' field.
   * @return The value of the 'CreatedTime' field.
   */
  public java.lang.CharSequence getCreatedTime() {
    return CreatedTime;
  }


  /**
   * Sets the value of the 'CreatedTime' field.
   * @param value the value to set.
   */
  public void setCreatedTime(java.lang.CharSequence value) {
    this.CreatedTime = value;
  }

  /**
   * Gets the value of the 'TotalAmount' field.
   * @return The value of the 'TotalAmount' field.
   */
  public double getTotalAmount() {
    return TotalAmount;
  }


  /**
   * Sets the value of the 'TotalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(double value) {
    this.TotalAmount = value;
  }

  /**
   * Gets the value of the 'StoreID' field.
   * @return The value of the 'StoreID' field.
   */
  public java.lang.CharSequence getStoreID() {
    return StoreID;
  }


  /**
   * Sets the value of the 'StoreID' field.
   * @param value the value to set.
   */
  public void setStoreID(java.lang.CharSequence value) {
    this.StoreID = value;
  }

  /**
   * Creates a new Invoice RecordBuilder.
   * @return A new Invoice RecordBuilder
   */
  public static types.Invoice.Builder newBuilder() {
    return new types.Invoice.Builder();
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Invoice RecordBuilder
   */
  public static types.Invoice.Builder newBuilder(types.Invoice.Builder other) {
    if (other == null) {
      return new types.Invoice.Builder();
    } else {
      return new types.Invoice.Builder(other);
    }
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Invoice instance.
   * @param other The existing instance to copy.
   * @return A new Invoice RecordBuilder
   */
  public static types.Invoice.Builder newBuilder(types.Invoice other) {
    if (other == null) {
      return new types.Invoice.Builder();
    } else {
      return new types.Invoice.Builder(other);
    }
  }

  /**
   * RecordBuilder for Invoice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Invoice>
    implements org.apache.avro.data.RecordBuilder<Invoice> {

    private int Number;
    private java.lang.CharSequence CreatedTime;
    private double TotalAmount;
    private java.lang.CharSequence StoreID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(types.Invoice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Number)) {
        this.Number = data().deepCopy(fields()[0].schema(), other.Number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.TotalAmount)) {
        this.TotalAmount = data().deepCopy(fields()[2].schema(), other.TotalAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[3].schema(), other.StoreID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Invoice instance
     * @param other The existing instance to copy.
     */
    private Builder(types.Invoice other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Number)) {
        this.Number = data().deepCopy(fields()[0].schema(), other.Number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TotalAmount)) {
        this.TotalAmount = data().deepCopy(fields()[2].schema(), other.TotalAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[3].schema(), other.StoreID);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Number' field.
      * @return The value.
      */
    public int getNumber() {
      return Number;
    }


    /**
      * Sets the value of the 'Number' field.
      * @param value The value of 'Number'.
      * @return This builder.
      */
    public types.Invoice.Builder setNumber(int value) {
      validate(fields()[0], value);
      this.Number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Number' field has been set.
      * @return True if the 'Number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Number' field.
      * @return This builder.
      */
    public types.Invoice.Builder clearNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CreatedTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedTime() {
      return CreatedTime;
    }


    /**
      * Sets the value of the 'CreatedTime' field.
      * @param value The value of 'CreatedTime'.
      * @return This builder.
      */
    public types.Invoice.Builder setCreatedTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.CreatedTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CreatedTime' field has been set.
      * @return True if the 'CreatedTime' field has been set, false otherwise.
      */
    public boolean hasCreatedTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CreatedTime' field.
      * @return This builder.
      */
    public types.Invoice.Builder clearCreatedTime() {
      CreatedTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TotalAmount' field.
      * @return The value.
      */
    public double getTotalAmount() {
      return TotalAmount;
    }


    /**
      * Sets the value of the 'TotalAmount' field.
      * @param value The value of 'TotalAmount'.
      * @return This builder.
      */
    public types.Invoice.Builder setTotalAmount(double value) {
      validate(fields()[2], value);
      this.TotalAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TotalAmount' field has been set.
      * @return True if the 'TotalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TotalAmount' field.
      * @return This builder.
      */
    public types.Invoice.Builder clearTotalAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'StoreID' field.
      * @return The value.
      */
    public java.lang.CharSequence getStoreID() {
      return StoreID;
    }


    /**
      * Sets the value of the 'StoreID' field.
      * @param value The value of 'StoreID'.
      * @return This builder.
      */
    public types.Invoice.Builder setStoreID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.StoreID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'StoreID' field has been set.
      * @return True if the 'StoreID' field has been set, false otherwise.
      */
    public boolean hasStoreID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'StoreID' field.
      * @return This builder.
      */
    public types.Invoice.Builder clearStoreID() {
      StoreID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Invoice build() {
      try {
        Invoice record = new Invoice();
        record.Number = fieldSetFlags()[0] ? this.Number : (java.lang.Integer) defaultValue(fields()[0]);
        record.CreatedTime = fieldSetFlags()[1] ? this.CreatedTime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.TotalAmount = fieldSetFlags()[2] ? this.TotalAmount : (java.lang.Double) defaultValue(fields()[2]);
        record.StoreID = fieldSetFlags()[3] ? this.StoreID : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Invoice>
    WRITER$ = (org.apache.avro.io.DatumWriter<Invoice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Invoice>
    READER$ = (org.apache.avro.io.DatumReader<Invoice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.Number);

    out.writeString(this.CreatedTime);

    out.writeDouble(this.TotalAmount);

    out.writeString(this.StoreID);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Number = in.readInt();

      this.CreatedTime = in.readString(this.CreatedTime instanceof Utf8 ? (Utf8)this.CreatedTime : null);

      this.TotalAmount = in.readDouble();

      this.StoreID = in.readString(this.StoreID instanceof Utf8 ? (Utf8)this.StoreID : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Number = in.readInt();
          break;

        case 1:
          this.CreatedTime = in.readString(this.CreatedTime instanceof Utf8 ? (Utf8)this.CreatedTime : null);
          break;

        case 2:
          this.TotalAmount = in.readDouble();
          break;

        case 3:
          this.StoreID = in.readString(this.StoreID instanceof Utf8 ? (Utf8)this.StoreID : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










