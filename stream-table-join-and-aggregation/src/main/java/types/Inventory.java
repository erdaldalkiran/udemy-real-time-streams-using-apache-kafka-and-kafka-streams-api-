/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package types;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Inventory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5461563482673943862L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Inventory\",\"namespace\":\"types\",\"fields\":[{\"name\":\"InventoryID\",\"type\":\"string\"},{\"name\":\"NewsType\",\"type\":\"string\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Inventory> ENCODER =
          new BinaryMessageEncoder<Inventory>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Inventory> DECODER =
          new BinaryMessageDecoder<Inventory>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Inventory> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Inventory> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Inventory> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Inventory>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Inventory to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Inventory from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Inventory instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Inventory fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence InventoryID;
  private CharSequence NewsType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Inventory() {
  }

  /**
   * All-args constructor.
   *
   * @param InventoryID The new value for InventoryID
   * @param NewsType    The new value for NewsType
   */
  public Inventory(CharSequence InventoryID, CharSequence NewsType) {
    this.InventoryID = InventoryID;
    this.NewsType = NewsType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
      case 0:
        return InventoryID;
      case 1:
        return NewsType;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
      case 0:
        InventoryID = (CharSequence) value$;
        break;
      case 1:
        NewsType = (CharSequence) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'InventoryID' field.
   *
   * @return The value of the 'InventoryID' field.
   */
  public CharSequence getInventoryID() {
    return InventoryID;
  }


  /**
   * Sets the value of the 'InventoryID' field.
   *
   * @param value the value to set.
   */
  public void setInventoryID(CharSequence value) {
    this.InventoryID = value;
  }

  /**
   * Gets the value of the 'NewsType' field.
   *
   * @return The value of the 'NewsType' field.
   */
  public CharSequence getNewsType() {
    return NewsType;
  }


  /**
   * Sets the value of the 'NewsType' field.
   *
   * @param value the value to set.
   */
  public void setNewsType(CharSequence value) {
    this.NewsType = value;
  }

  /**
   * Creates a new Inventory RecordBuilder.
   *
   * @return A new Inventory RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Inventory RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new Inventory RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Inventory RecordBuilder by copying an existing Inventory instance.
   *
   * @param other The existing instance to copy.
   * @return A new Inventory RecordBuilder
   */
  public static Builder newBuilder(Inventory other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Inventory instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Inventory>
          implements org.apache.avro.data.RecordBuilder<Inventory> {

    private CharSequence InventoryID;
    private CharSequence NewsType;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.InventoryID)) {
        this.InventoryID = data().deepCopy(fields()[0].schema(), other.InventoryID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.NewsType)) {
        this.NewsType = data().deepCopy(fields()[1].schema(), other.NewsType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Inventory instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(Inventory other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.InventoryID)) {
        this.InventoryID = data().deepCopy(fields()[0].schema(), other.InventoryID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NewsType)) {
        this.NewsType = data().deepCopy(fields()[1].schema(), other.NewsType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'InventoryID' field.
     *
     * @return The value.
     */
    public CharSequence getInventoryID() {
      return InventoryID;
    }


    /**
     * Sets the value of the 'InventoryID' field.
     *
     * @param value The value of 'InventoryID'.
     * @return This builder.
     */
    public Builder setInventoryID(CharSequence value) {
      validate(fields()[0], value);
      this.InventoryID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'InventoryID' field has been set.
     *
     * @return True if the 'InventoryID' field has been set, false otherwise.
     */
    public boolean hasInventoryID() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'InventoryID' field.
     *
     * @return This builder.
     */
    public Builder clearInventoryID() {
      InventoryID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'NewsType' field.
     *
     * @return The value.
     */
    public CharSequence getNewsType() {
      return NewsType;
    }


    /**
     * Sets the value of the 'NewsType' field.
     *
     * @param value The value of 'NewsType'.
     * @return This builder.
     */
    public Builder setNewsType(CharSequence value) {
      validate(fields()[1], value);
      this.NewsType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'NewsType' field has been set.
     *
     * @return True if the 'NewsType' field has been set, false otherwise.
     */
    public boolean hasNewsType() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'NewsType' field.
     *
     * @return This builder.
     */
    public Builder clearNewsType() {
      NewsType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Inventory build() {
      try {
        Inventory record = new Inventory();
        record.InventoryID = fieldSetFlags()[0] ? this.InventoryID : (CharSequence) defaultValue(fields()[0]);
        record.NewsType = fieldSetFlags()[1] ? this.NewsType : (CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Inventory>
          WRITER$ = (org.apache.avro.io.DatumWriter<Inventory>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Inventory>
          READER$ = (org.apache.avro.io.DatumReader<Inventory>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    out.writeString(this.InventoryID);

    out.writeString(this.NewsType);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.InventoryID = in.readString(this.InventoryID instanceof Utf8 ? (Utf8) this.InventoryID : null);

      this.NewsType = in.readString(this.NewsType instanceof Utf8 ? (Utf8) this.NewsType : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.InventoryID = in.readString(this.InventoryID instanceof Utf8 ? (Utf8) this.InventoryID : null);
            break;

          case 1:
            this.NewsType = in.readString(this.NewsType instanceof Utf8 ? (Utf8) this.NewsType : null);
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










