/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package types;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class CampaignPerformance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4901676534791516050L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CampaignPerformance\",\"namespace\":\"types\",\"fields\":[{\"name\":\"Campaigner\",\"type\":\"string\"},{\"name\":\"ImpressionCount\",\"type\":\"long\"},{\"name\":\"ClickCount\",\"type\":\"long\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CampaignPerformance> ENCODER =
      new BinaryMessageEncoder<CampaignPerformance>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CampaignPerformance> DECODER =
      new BinaryMessageDecoder<CampaignPerformance>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CampaignPerformance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CampaignPerformance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CampaignPerformance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CampaignPerformance>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CampaignPerformance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CampaignPerformance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CampaignPerformance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CampaignPerformance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence Campaigner;
  private long ImpressionCount;
  private long ClickCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CampaignPerformance() {
  }

  /**
   * All-args constructor.
   * @param Campaigner The new value for Campaigner
   * @param ImpressionCount The new value for ImpressionCount
   * @param ClickCount The new value for ClickCount
   */
  public CampaignPerformance(java.lang.CharSequence Campaigner, java.lang.Long ImpressionCount, java.lang.Long ClickCount) {
    this.Campaigner = Campaigner;
    this.ImpressionCount = ImpressionCount;
    this.ClickCount = ClickCount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return Campaigner;
      case 1:
        return ImpressionCount;
      case 2:
        return ClickCount;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        Campaigner = (java.lang.CharSequence) value$;
        break;
      case 1:
        ImpressionCount = (java.lang.Long) value$;
        break;
      case 2:
        ClickCount = (java.lang.Long) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Campaigner' field.
   * @return The value of the 'Campaigner' field.
   */
  public java.lang.CharSequence getCampaigner() {
    return Campaigner;
  }


  /**
   * Sets the value of the 'Campaigner' field.
   * @param value the value to set.
   */
  public void setCampaigner(java.lang.CharSequence value) {
    this.Campaigner = value;
  }

  /**
   * Gets the value of the 'ImpressionCount' field.
   * @return The value of the 'ImpressionCount' field.
   */
  public long getImpressionCount() {
    return ImpressionCount;
  }


  /**
   * Sets the value of the 'ImpressionCount' field.
   * @param value the value to set.
   */
  public void setImpressionCount(long value) {
    this.ImpressionCount = value;
  }

  /**
   * Gets the value of the 'ClickCount' field.
   * @return The value of the 'ClickCount' field.
   */
  public long getClickCount() {
    return ClickCount;
  }


  /**
   * Sets the value of the 'ClickCount' field.
   * @param value the value to set.
   */
  public void setClickCount(long value) {
    this.ClickCount = value;
  }

  /**
   * Creates a new CampaignPerformance RecordBuilder.
   * @return A new CampaignPerformance RecordBuilder
   */
  public static types.CampaignPerformance.Builder newBuilder() {
    return new types.CampaignPerformance.Builder();
  }

  /**
   * Creates a new CampaignPerformance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CampaignPerformance RecordBuilder
   */
  public static types.CampaignPerformance.Builder newBuilder(types.CampaignPerformance.Builder other) {
    if (other == null) {
      return new types.CampaignPerformance.Builder();
    } else {
      return new types.CampaignPerformance.Builder(other);
    }
  }

  /**
   * Creates a new CampaignPerformance RecordBuilder by copying an existing CampaignPerformance instance.
   * @param other The existing instance to copy.
   * @return A new CampaignPerformance RecordBuilder
   */
  public static types.CampaignPerformance.Builder newBuilder(types.CampaignPerformance other) {
    if (other == null) {
      return new types.CampaignPerformance.Builder();
    } else {
      return new types.CampaignPerformance.Builder(other);
    }
  }

  /**
   * RecordBuilder for CampaignPerformance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CampaignPerformance>
      implements org.apache.avro.data.RecordBuilder<CampaignPerformance> {

    private java.lang.CharSequence Campaigner;
    private long ImpressionCount;
    private long ClickCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(types.CampaignPerformance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Campaigner)) {
        this.Campaigner = data().deepCopy(fields()[0].schema(), other.Campaigner);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ImpressionCount)) {
        this.ImpressionCount = data().deepCopy(fields()[1].schema(), other.ImpressionCount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ClickCount)) {
        this.ClickCount = data().deepCopy(fields()[2].schema(), other.ClickCount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing CampaignPerformance instance
     * @param other The existing instance to copy.
     */
    private Builder(types.CampaignPerformance other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Campaigner)) {
        this.Campaigner = data().deepCopy(fields()[0].schema(), other.Campaigner);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ImpressionCount)) {
        this.ImpressionCount = data().deepCopy(fields()[1].schema(), other.ImpressionCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ClickCount)) {
        this.ClickCount = data().deepCopy(fields()[2].schema(), other.ClickCount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'Campaigner' field.
     * @return The value.
     */
    public java.lang.CharSequence getCampaigner() {
      return Campaigner;
    }


    /**
     * Sets the value of the 'Campaigner' field.
     * @param value The value of 'Campaigner'.
     * @return This builder.
     */
    public types.CampaignPerformance.Builder setCampaigner(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Campaigner = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'Campaigner' field has been set.
     * @return True if the 'Campaigner' field has been set, false otherwise.
     */
    public boolean hasCampaigner() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'Campaigner' field.
     * @return This builder.
     */
    public types.CampaignPerformance.Builder clearCampaigner() {
      Campaigner = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'ImpressionCount' field.
     * @return The value.
     */
    public long getImpressionCount() {
      return ImpressionCount;
    }


    /**
     * Sets the value of the 'ImpressionCount' field.
     * @param value The value of 'ImpressionCount'.
     * @return This builder.
     */
    public types.CampaignPerformance.Builder setImpressionCount(long value) {
      validate(fields()[1], value);
      this.ImpressionCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'ImpressionCount' field has been set.
     * @return True if the 'ImpressionCount' field has been set, false otherwise.
     */
    public boolean hasImpressionCount() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'ImpressionCount' field.
     * @return This builder.
     */
    public types.CampaignPerformance.Builder clearImpressionCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'ClickCount' field.
     * @return The value.
     */
    public long getClickCount() {
      return ClickCount;
    }


    /**
     * Sets the value of the 'ClickCount' field.
     * @param value The value of 'ClickCount'.
     * @return This builder.
     */
    public types.CampaignPerformance.Builder setClickCount(long value) {
      validate(fields()[2], value);
      this.ClickCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'ClickCount' field has been set.
     * @return True if the 'ClickCount' field has been set, false otherwise.
     */
    public boolean hasClickCount() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'ClickCount' field.
     * @return This builder.
     */
    public types.CampaignPerformance.Builder clearClickCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CampaignPerformance build() {
      try {
        CampaignPerformance record = new CampaignPerformance();
        record.Campaigner = fieldSetFlags()[0] ? this.Campaigner : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ImpressionCount = fieldSetFlags()[1] ? this.ImpressionCount : (java.lang.Long) defaultValue(fields()[1]);
        record.ClickCount = fieldSetFlags()[2] ? this.ClickCount : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CampaignPerformance>
      WRITER$ = (org.apache.avro.io.DatumWriter<CampaignPerformance>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CampaignPerformance>
      READER$ = (org.apache.avro.io.DatumReader<CampaignPerformance>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
      throws java.io.IOException {
    out.writeString(this.Campaigner);

    out.writeLong(this.ImpressionCount);

    out.writeLong(this.ClickCount);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
      throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Campaigner = in.readString(this.Campaigner instanceof Utf8 ? (Utf8) this.Campaigner : null);

      this.ImpressionCount = in.readLong();

      this.ClickCount = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.Campaigner = in.readString(this.Campaigner instanceof Utf8 ? (Utf8) this.Campaigner : null);
            break;

          case 1:
            this.ImpressionCount = in.readLong();
            break;

          case 2:
            this.ClickCount = in.readLong();
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










