/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package types;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class TransactionStatus extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2778230254640213067L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionStatus\",\"namespace\":\"types\",\"fields\":[{\"name\":\"TransactionID\",\"type\":\"string\"},{\"name\":\"Status\",\"type\":\"string\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionStatus> ENCODER =
          new BinaryMessageEncoder<TransactionStatus>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionStatus> DECODER =
          new BinaryMessageDecoder<TransactionStatus>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionStatus> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionStatus> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionStatus> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionStatus>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionStatus to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionStatus from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionStatus instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionStatus fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence TransactionID;
  private java.lang.CharSequence Status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionStatus() {
  }

  /**
   * All-args constructor.
   * @param TransactionID The new value for TransactionID
   * @param Status The new value for Status
   */
  public TransactionStatus(java.lang.CharSequence TransactionID, java.lang.CharSequence Status) {
    this.TransactionID = TransactionID;
    this.Status = Status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return TransactionID;
      case 1:
        return Status;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        TransactionID = (java.lang.CharSequence) value$;
        break;
      case 1:
        Status = (java.lang.CharSequence) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'TransactionID' field.
   * @return The value of the 'TransactionID' field.
   */
  public java.lang.CharSequence getTransactionID() {
    return TransactionID;
  }


  /**
   * Sets the value of the 'TransactionID' field.
   * @param value the value to set.
   */
  public void setTransactionID(java.lang.CharSequence value) {
    this.TransactionID = value;
  }

  /**
   * Gets the value of the 'Status' field.
   * @return The value of the 'Status' field.
   */
  public java.lang.CharSequence getStatus() {
    return Status;
  }


  /**
   * Sets the value of the 'Status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.Status = value;
  }

  /**
   * Creates a new TransactionStatus RecordBuilder.
   * @return A new TransactionStatus RecordBuilder
   */
  public static types.TransactionStatus.Builder newBuilder() {
    return new types.TransactionStatus.Builder();
  }

  /**
   * Creates a new TransactionStatus RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionStatus RecordBuilder
   */
  public static types.TransactionStatus.Builder newBuilder(types.TransactionStatus.Builder other) {
    if (other == null) {
      return new types.TransactionStatus.Builder();
    } else {
      return new types.TransactionStatus.Builder(other);
    }
  }

  /**
   * Creates a new TransactionStatus RecordBuilder by copying an existing TransactionStatus instance.
   * @param other The existing instance to copy.
   * @return A new TransactionStatus RecordBuilder
   */
  public static types.TransactionStatus.Builder newBuilder(types.TransactionStatus other) {
    if (other == null) {
      return new types.TransactionStatus.Builder();
    } else {
      return new types.TransactionStatus.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionStatus instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionStatus>
          implements org.apache.avro.data.RecordBuilder<TransactionStatus> {

    private java.lang.CharSequence TransactionID;
    private java.lang.CharSequence Status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(types.TransactionStatus.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TransactionID)) {
        this.TransactionID = data().deepCopy(fields()[0].schema(), other.TransactionID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Status)) {
        this.Status = data().deepCopy(fields()[1].schema(), other.Status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionStatus instance
     * @param other The existing instance to copy.
     */
    private Builder(types.TransactionStatus other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.TransactionID)) {
        this.TransactionID = data().deepCopy(fields()[0].schema(), other.TransactionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Status)) {
        this.Status = data().deepCopy(fields()[1].schema(), other.Status);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'TransactionID' field.
     * @return The value.
     */
    public java.lang.CharSequence getTransactionID() {
      return TransactionID;
    }


    /**
     * Sets the value of the 'TransactionID' field.
     * @param value The value of 'TransactionID'.
     * @return This builder.
     */
    public types.TransactionStatus.Builder setTransactionID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.TransactionID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'TransactionID' field has been set.
     * @return True if the 'TransactionID' field has been set, false otherwise.
     */
    public boolean hasTransactionID() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'TransactionID' field.
     * @return This builder.
     */
    public types.TransactionStatus.Builder clearTransactionID() {
      TransactionID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'Status' field.
     * @return The value.
     */
    public java.lang.CharSequence getStatus() {
      return Status;
    }


    /**
     * Sets the value of the 'Status' field.
     * @param value The value of 'Status'.
     * @return This builder.
     */
    public types.TransactionStatus.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'Status' field has been set.
     * @return True if the 'Status' field has been set, false otherwise.
     */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'Status' field.
     * @return This builder.
     */
    public types.TransactionStatus.Builder clearStatus() {
      Status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionStatus build() {
      try {
        TransactionStatus record = new TransactionStatus();
        record.TransactionID = fieldSetFlags()[0] ? this.TransactionID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Status = fieldSetFlags()[1] ? this.Status : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionStatus>
          WRITER$ = (org.apache.avro.io.DatumWriter<TransactionStatus>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionStatus>
          READER$ = (org.apache.avro.io.DatumReader<TransactionStatus>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    out.writeString(this.TransactionID);

    out.writeString(this.Status);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.TransactionID = in.readString(this.TransactionID instanceof Utf8 ? (Utf8) this.TransactionID : null);

      this.Status = in.readString(this.Status instanceof Utf8 ? (Utf8) this.Status : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.TransactionID = in.readString(this.TransactionID instanceof Utf8 ? (Utf8) this.TransactionID : null);
            break;

          case 1:
            this.Status = in.readString(this.Status instanceof Utf8 ? (Utf8) this.Status : null);
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










