/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package types;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class PaymentRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7471598726770015956L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentRequest\",\"namespace\":\"types\",\"fields\":[{\"name\":\"TransactionID\",\"type\":\"string\"},{\"name\":\"CreatedTime\",\"type\":\"string\"},{\"name\":\"SourceAccountID\",\"type\":\"string\"},{\"name\":\"TargetAccountID\",\"type\":\"string\"},{\"name\":\"Amount\",\"type\":\"double\"},{\"name\":\"OTP\",\"type\":\"int\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentRequest> ENCODER =
          new BinaryMessageEncoder<PaymentRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentRequest> DECODER =
          new BinaryMessageDecoder<PaymentRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentRequest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentRequest fromByteBuffer(
          java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence TransactionID;
  private java.lang.CharSequence CreatedTime;
  private java.lang.CharSequence SourceAccountID;
  private java.lang.CharSequence TargetAccountID;
  private double Amount;
  private int OTP;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentRequest() {
  }

  /**
   * All-args constructor.
   * @param TransactionID The new value for TransactionID
   * @param CreatedTime The new value for CreatedTime
   * @param SourceAccountID The new value for SourceAccountID
   * @param TargetAccountID The new value for TargetAccountID
   * @param Amount The new value for Amount
   * @param OTP The new value for OTP
   */
  public PaymentRequest(java.lang.CharSequence TransactionID, java.lang.CharSequence CreatedTime, java.lang.CharSequence SourceAccountID, java.lang.CharSequence TargetAccountID, java.lang.Double Amount, java.lang.Integer OTP) {
    this.TransactionID = TransactionID;
    this.CreatedTime = CreatedTime;
    this.SourceAccountID = SourceAccountID;
    this.TargetAccountID = TargetAccountID;
    this.Amount = Amount;
    this.OTP = OTP;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return TransactionID;
      case 1:
        return CreatedTime;
      case 2:
        return SourceAccountID;
      case 3:
        return TargetAccountID;
      case 4:
        return Amount;
      case 5:
        return OTP;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        TransactionID = (java.lang.CharSequence) value$;
        break;
      case 1:
        CreatedTime = (java.lang.CharSequence) value$;
        break;
      case 2:
        SourceAccountID = (java.lang.CharSequence) value$;
        break;
      case 3:
        TargetAccountID = (java.lang.CharSequence) value$;
        break;
      case 4:
        Amount = (java.lang.Double) value$;
        break;
      case 5:
        OTP = (java.lang.Integer) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'TransactionID' field.
   * @return The value of the 'TransactionID' field.
   */
  public java.lang.CharSequence getTransactionID() {
    return TransactionID;
  }


  /**
   * Sets the value of the 'TransactionID' field.
   * @param value the value to set.
   */
  public void setTransactionID(java.lang.CharSequence value) {
    this.TransactionID = value;
  }

  /**
   * Gets the value of the 'CreatedTime' field.
   * @return The value of the 'CreatedTime' field.
   */
  public java.lang.CharSequence getCreatedTime() {
    return CreatedTime;
  }


  /**
   * Sets the value of the 'CreatedTime' field.
   * @param value the value to set.
   */
  public void setCreatedTime(java.lang.CharSequence value) {
    this.CreatedTime = value;
  }

  /**
   * Gets the value of the 'SourceAccountID' field.
   * @return The value of the 'SourceAccountID' field.
   */
  public java.lang.CharSequence getSourceAccountID() {
    return SourceAccountID;
  }


  /**
   * Sets the value of the 'SourceAccountID' field.
   * @param value the value to set.
   */
  public void setSourceAccountID(java.lang.CharSequence value) {
    this.SourceAccountID = value;
  }

  /**
   * Gets the value of the 'TargetAccountID' field.
   * @return The value of the 'TargetAccountID' field.
   */
  public java.lang.CharSequence getTargetAccountID() {
    return TargetAccountID;
  }


  /**
   * Sets the value of the 'TargetAccountID' field.
   * @param value the value to set.
   */
  public void setTargetAccountID(java.lang.CharSequence value) {
    this.TargetAccountID = value;
  }

  /**
   * Gets the value of the 'Amount' field.
   * @return The value of the 'Amount' field.
   */
  public double getAmount() {
    return Amount;
  }


  /**
   * Sets the value of the 'Amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.Amount = value;
  }

  /**
   * Gets the value of the 'OTP' field.
   * @return The value of the 'OTP' field.
   */
  public int getOTP() {
    return OTP;
  }


  /**
   * Sets the value of the 'OTP' field.
   * @param value the value to set.
   */
  public void setOTP(int value) {
    this.OTP = value;
  }

  /**
   * Creates a new PaymentRequest RecordBuilder.
   * @return A new PaymentRequest RecordBuilder
   */
  public static types.PaymentRequest.Builder newBuilder() {
    return new types.PaymentRequest.Builder();
  }

  /**
   * Creates a new PaymentRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentRequest RecordBuilder
   */
  public static types.PaymentRequest.Builder newBuilder(types.PaymentRequest.Builder other) {
    if (other == null) {
      return new types.PaymentRequest.Builder();
    } else {
      return new types.PaymentRequest.Builder(other);
    }
  }

  /**
   * Creates a new PaymentRequest RecordBuilder by copying an existing PaymentRequest instance.
   * @param other The existing instance to copy.
   * @return A new PaymentRequest RecordBuilder
   */
  public static types.PaymentRequest.Builder newBuilder(types.PaymentRequest other) {
    if (other == null) {
      return new types.PaymentRequest.Builder();
    } else {
      return new types.PaymentRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentRequest>
          implements org.apache.avro.data.RecordBuilder<PaymentRequest> {

    private java.lang.CharSequence TransactionID;
    private java.lang.CharSequence CreatedTime;
    private java.lang.CharSequence SourceAccountID;
    private java.lang.CharSequence TargetAccountID;
    private double Amount;
    private int OTP;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(types.PaymentRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TransactionID)) {
        this.TransactionID = data().deepCopy(fields()[0].schema(), other.TransactionID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.SourceAccountID)) {
        this.SourceAccountID = data().deepCopy(fields()[2].schema(), other.SourceAccountID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.TargetAccountID)) {
        this.TargetAccountID = data().deepCopy(fields()[3].schema(), other.TargetAccountID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Amount)) {
        this.Amount = data().deepCopy(fields()[4].schema(), other.Amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.OTP)) {
        this.OTP = data().deepCopy(fields()[5].schema(), other.OTP);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(types.PaymentRequest other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.TransactionID)) {
        this.TransactionID = data().deepCopy(fields()[0].schema(), other.TransactionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SourceAccountID)) {
        this.SourceAccountID = data().deepCopy(fields()[2].schema(), other.SourceAccountID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TargetAccountID)) {
        this.TargetAccountID = data().deepCopy(fields()[3].schema(), other.TargetAccountID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Amount)) {
        this.Amount = data().deepCopy(fields()[4].schema(), other.Amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.OTP)) {
        this.OTP = data().deepCopy(fields()[5].schema(), other.OTP);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Gets the value of the 'TransactionID' field.
     * @return The value.
     */
    public java.lang.CharSequence getTransactionID() {
      return TransactionID;
    }


    /**
     * Sets the value of the 'TransactionID' field.
     * @param value The value of 'TransactionID'.
     * @return This builder.
     */
    public types.PaymentRequest.Builder setTransactionID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.TransactionID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'TransactionID' field has been set.
     * @return True if the 'TransactionID' field has been set, false otherwise.
     */
    public boolean hasTransactionID() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'TransactionID' field.
     * @return This builder.
     */
    public types.PaymentRequest.Builder clearTransactionID() {
      TransactionID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'CreatedTime' field.
     * @return The value.
     */
    public java.lang.CharSequence getCreatedTime() {
      return CreatedTime;
    }


    /**
     * Sets the value of the 'CreatedTime' field.
     * @param value The value of 'CreatedTime'.
     * @return This builder.
     */
    public types.PaymentRequest.Builder setCreatedTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.CreatedTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'CreatedTime' field has been set.
     * @return True if the 'CreatedTime' field has been set, false otherwise.
     */
    public boolean hasCreatedTime() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'CreatedTime' field.
     * @return This builder.
     */
    public types.PaymentRequest.Builder clearCreatedTime() {
      CreatedTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'SourceAccountID' field.
     * @return The value.
     */
    public java.lang.CharSequence getSourceAccountID() {
      return SourceAccountID;
    }


    /**
     * Sets the value of the 'SourceAccountID' field.
     * @param value The value of 'SourceAccountID'.
     * @return This builder.
     */
    public types.PaymentRequest.Builder setSourceAccountID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.SourceAccountID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'SourceAccountID' field has been set.
     * @return True if the 'SourceAccountID' field has been set, false otherwise.
     */
    public boolean hasSourceAccountID() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'SourceAccountID' field.
     * @return This builder.
     */
    public types.PaymentRequest.Builder clearSourceAccountID() {
      SourceAccountID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'TargetAccountID' field.
     * @return The value.
     */
    public java.lang.CharSequence getTargetAccountID() {
      return TargetAccountID;
    }


    /**
     * Sets the value of the 'TargetAccountID' field.
     * @param value The value of 'TargetAccountID'.
     * @return This builder.
     */
    public types.PaymentRequest.Builder setTargetAccountID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.TargetAccountID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'TargetAccountID' field has been set.
     * @return True if the 'TargetAccountID' field has been set, false otherwise.
     */
    public boolean hasTargetAccountID() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'TargetAccountID' field.
     * @return This builder.
     */
    public types.PaymentRequest.Builder clearTargetAccountID() {
      TargetAccountID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'Amount' field.
     * @return The value.
     */
    public double getAmount() {
      return Amount;
    }


    /**
     * Sets the value of the 'Amount' field.
     * @param value The value of 'Amount'.
     * @return This builder.
     */
    public types.PaymentRequest.Builder setAmount(double value) {
      validate(fields()[4], value);
      this.Amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'Amount' field has been set.
     * @return True if the 'Amount' field has been set, false otherwise.
     */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
     * Clears the value of the 'Amount' field.
     * @return This builder.
     */
    public types.PaymentRequest.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'OTP' field.
     * @return The value.
     */
    public int getOTP() {
      return OTP;
    }


    /**
     * Sets the value of the 'OTP' field.
     * @param value The value of 'OTP'.
     * @return This builder.
     */
    public types.PaymentRequest.Builder setOTP(int value) {
      validate(fields()[5], value);
      this.OTP = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'OTP' field has been set.
     * @return True if the 'OTP' field has been set, false otherwise.
     */
    public boolean hasOTP() {
      return fieldSetFlags()[5];
    }


    /**
     * Clears the value of the 'OTP' field.
     * @return This builder.
     */
    public types.PaymentRequest.Builder clearOTP() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentRequest build() {
      try {
        PaymentRequest record = new PaymentRequest();
        record.TransactionID = fieldSetFlags()[0] ? this.TransactionID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.CreatedTime = fieldSetFlags()[1] ? this.CreatedTime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.SourceAccountID = fieldSetFlags()[2] ? this.SourceAccountID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.TargetAccountID = fieldSetFlags()[3] ? this.TargetAccountID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.Amount = fieldSetFlags()[4] ? this.Amount : (java.lang.Double) defaultValue(fields()[4]);
        record.OTP = fieldSetFlags()[5] ? this.OTP : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentRequest>
          WRITER$ = (org.apache.avro.io.DatumWriter<PaymentRequest>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
          throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentRequest>
          READER$ = (org.apache.avro.io.DatumReader<PaymentRequest>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
          throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
          throws java.io.IOException {
    out.writeString(this.TransactionID);

    out.writeString(this.CreatedTime);

    out.writeString(this.SourceAccountID);

    out.writeString(this.TargetAccountID);

    out.writeDouble(this.Amount);

    out.writeInt(this.OTP);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
          throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.TransactionID = in.readString(this.TransactionID instanceof Utf8 ? (Utf8) this.TransactionID : null);

      this.CreatedTime = in.readString(this.CreatedTime instanceof Utf8 ? (Utf8) this.CreatedTime : null);

      this.SourceAccountID = in.readString(this.SourceAccountID instanceof Utf8 ? (Utf8) this.SourceAccountID : null);

      this.TargetAccountID = in.readString(this.TargetAccountID instanceof Utf8 ? (Utf8) this.TargetAccountID : null);

      this.Amount = in.readDouble();

      this.OTP = in.readInt();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.TransactionID = in.readString(this.TransactionID instanceof Utf8 ? (Utf8) this.TransactionID : null);
            break;

          case 1:
            this.CreatedTime = in.readString(this.CreatedTime instanceof Utf8 ? (Utf8) this.CreatedTime : null);
            break;

          case 2:
            this.SourceAccountID = in.readString(this.SourceAccountID instanceof Utf8 ? (Utf8) this.SourceAccountID : null);
            break;

          case 3:
            this.TargetAccountID = in.readString(this.TargetAccountID instanceof Utf8 ? (Utf8) this.TargetAccountID : null);
            break;

          case 4:
            this.Amount = in.readDouble();
            break;

          case 5:
            this.OTP = in.readInt();
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










