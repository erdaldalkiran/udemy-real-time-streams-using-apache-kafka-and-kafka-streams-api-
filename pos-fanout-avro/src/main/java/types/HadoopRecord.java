/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class HadoopRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3369194047193412802L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HadoopRecord\",\"namespace\":\"types\",\"fields\":[{\"name\":\"InvoiceNumber\",\"type\":\"string\"},{\"name\":\"CreatedTime\",\"type\":\"long\"},{\"name\":\"StoreID\",\"type\":\"string\"},{\"name\":\"PosID\",\"type\":\"string\"},{\"name\":\"CustomerType\",\"type\":\"string\"},{\"name\":\"PaymentMethod\",\"type\":\"string\"},{\"name\":\"DeliveryType\",\"type\":\"string\"},{\"name\":\"City\",\"type\":[\"null\",\"string\"]},{\"name\":\"State\",\"type\":[\"null\",\"string\"]},{\"name\":\"PinCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"ItemCode\",\"type\":\"string\"},{\"name\":\"ItemDescription\",\"type\":\"string\"},{\"name\":\"ItemPrice\",\"type\":\"double\"},{\"name\":\"ItemQty\",\"type\":\"int\"},{\"name\":\"TotalValue\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HadoopRecord> ENCODER =
      new BinaryMessageEncoder<HadoopRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HadoopRecord> DECODER =
      new BinaryMessageDecoder<HadoopRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HadoopRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HadoopRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HadoopRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HadoopRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HadoopRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HadoopRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HadoopRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HadoopRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence InvoiceNumber;
   private long CreatedTime;
   private java.lang.CharSequence StoreID;
   private java.lang.CharSequence PosID;
   private java.lang.CharSequence CustomerType;
   private java.lang.CharSequence PaymentMethod;
   private java.lang.CharSequence DeliveryType;
   private java.lang.CharSequence City;
   private java.lang.CharSequence State;
   private java.lang.CharSequence PinCode;
   private java.lang.CharSequence ItemCode;
   private java.lang.CharSequence ItemDescription;
   private double ItemPrice;
   private int ItemQty;
   private double TotalValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HadoopRecord() {}

  /**
   * All-args constructor.
   * @param InvoiceNumber The new value for InvoiceNumber
   * @param CreatedTime The new value for CreatedTime
   * @param StoreID The new value for StoreID
   * @param PosID The new value for PosID
   * @param CustomerType The new value for CustomerType
   * @param PaymentMethod The new value for PaymentMethod
   * @param DeliveryType The new value for DeliveryType
   * @param City The new value for City
   * @param State The new value for State
   * @param PinCode The new value for PinCode
   * @param ItemCode The new value for ItemCode
   * @param ItemDescription The new value for ItemDescription
   * @param ItemPrice The new value for ItemPrice
   * @param ItemQty The new value for ItemQty
   * @param TotalValue The new value for TotalValue
   */
  public HadoopRecord(java.lang.CharSequence InvoiceNumber, java.lang.Long CreatedTime, java.lang.CharSequence StoreID, java.lang.CharSequence PosID, java.lang.CharSequence CustomerType, java.lang.CharSequence PaymentMethod, java.lang.CharSequence DeliveryType, java.lang.CharSequence City, java.lang.CharSequence State, java.lang.CharSequence PinCode, java.lang.CharSequence ItemCode, java.lang.CharSequence ItemDescription, java.lang.Double ItemPrice, java.lang.Integer ItemQty, java.lang.Double TotalValue) {
    this.InvoiceNumber = InvoiceNumber;
    this.CreatedTime = CreatedTime;
    this.StoreID = StoreID;
    this.PosID = PosID;
    this.CustomerType = CustomerType;
    this.PaymentMethod = PaymentMethod;
    this.DeliveryType = DeliveryType;
    this.City = City;
    this.State = State;
    this.PinCode = PinCode;
    this.ItemCode = ItemCode;
    this.ItemDescription = ItemDescription;
    this.ItemPrice = ItemPrice;
    this.ItemQty = ItemQty;
    this.TotalValue = TotalValue;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return InvoiceNumber;
    case 1: return CreatedTime;
    case 2: return StoreID;
    case 3: return PosID;
    case 4: return CustomerType;
    case 5: return PaymentMethod;
    case 6: return DeliveryType;
    case 7: return City;
    case 8: return State;
    case 9: return PinCode;
    case 10: return ItemCode;
    case 11: return ItemDescription;
    case 12: return ItemPrice;
    case 13: return ItemQty;
    case 14: return TotalValue;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: InvoiceNumber = (java.lang.CharSequence)value$; break;
    case 1: CreatedTime = (java.lang.Long)value$; break;
    case 2: StoreID = (java.lang.CharSequence)value$; break;
    case 3: PosID = (java.lang.CharSequence)value$; break;
    case 4: CustomerType = (java.lang.CharSequence)value$; break;
    case 5: PaymentMethod = (java.lang.CharSequence)value$; break;
    case 6: DeliveryType = (java.lang.CharSequence)value$; break;
    case 7: City = (java.lang.CharSequence)value$; break;
    case 8: State = (java.lang.CharSequence)value$; break;
    case 9: PinCode = (java.lang.CharSequence)value$; break;
    case 10: ItemCode = (java.lang.CharSequence)value$; break;
    case 11: ItemDescription = (java.lang.CharSequence)value$; break;
    case 12: ItemPrice = (java.lang.Double)value$; break;
    case 13: ItemQty = (java.lang.Integer)value$; break;
    case 14: TotalValue = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'InvoiceNumber' field.
   * @return The value of the 'InvoiceNumber' field.
   */
  public java.lang.CharSequence getInvoiceNumber() {
    return InvoiceNumber;
  }


  /**
   * Sets the value of the 'InvoiceNumber' field.
   * @param value the value to set.
   */
  public void setInvoiceNumber(java.lang.CharSequence value) {
    this.InvoiceNumber = value;
  }

  /**
   * Gets the value of the 'CreatedTime' field.
   * @return The value of the 'CreatedTime' field.
   */
  public long getCreatedTime() {
    return CreatedTime;
  }


  /**
   * Sets the value of the 'CreatedTime' field.
   * @param value the value to set.
   */
  public void setCreatedTime(long value) {
    this.CreatedTime = value;
  }

  /**
   * Gets the value of the 'StoreID' field.
   * @return The value of the 'StoreID' field.
   */
  public java.lang.CharSequence getStoreID() {
    return StoreID;
  }


  /**
   * Sets the value of the 'StoreID' field.
   * @param value the value to set.
   */
  public void setStoreID(java.lang.CharSequence value) {
    this.StoreID = value;
  }

  /**
   * Gets the value of the 'PosID' field.
   * @return The value of the 'PosID' field.
   */
  public java.lang.CharSequence getPosID() {
    return PosID;
  }


  /**
   * Sets the value of the 'PosID' field.
   * @param value the value to set.
   */
  public void setPosID(java.lang.CharSequence value) {
    this.PosID = value;
  }

  /**
   * Gets the value of the 'CustomerType' field.
   * @return The value of the 'CustomerType' field.
   */
  public java.lang.CharSequence getCustomerType() {
    return CustomerType;
  }


  /**
   * Sets the value of the 'CustomerType' field.
   * @param value the value to set.
   */
  public void setCustomerType(java.lang.CharSequence value) {
    this.CustomerType = value;
  }

  /**
   * Gets the value of the 'PaymentMethod' field.
   * @return The value of the 'PaymentMethod' field.
   */
  public java.lang.CharSequence getPaymentMethod() {
    return PaymentMethod;
  }


  /**
   * Sets the value of the 'PaymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(java.lang.CharSequence value) {
    this.PaymentMethod = value;
  }

  /**
   * Gets the value of the 'DeliveryType' field.
   * @return The value of the 'DeliveryType' field.
   */
  public java.lang.CharSequence getDeliveryType() {
    return DeliveryType;
  }


  /**
   * Sets the value of the 'DeliveryType' field.
   * @param value the value to set.
   */
  public void setDeliveryType(java.lang.CharSequence value) {
    this.DeliveryType = value;
  }

  /**
   * Gets the value of the 'City' field.
   * @return The value of the 'City' field.
   */
  public java.lang.CharSequence getCity() {
    return City;
  }


  /**
   * Sets the value of the 'City' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.City = value;
  }

  /**
   * Gets the value of the 'State' field.
   * @return The value of the 'State' field.
   */
  public java.lang.CharSequence getState() {
    return State;
  }


  /**
   * Sets the value of the 'State' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.State = value;
  }

  /**
   * Gets the value of the 'PinCode' field.
   * @return The value of the 'PinCode' field.
   */
  public java.lang.CharSequence getPinCode() {
    return PinCode;
  }


  /**
   * Sets the value of the 'PinCode' field.
   * @param value the value to set.
   */
  public void setPinCode(java.lang.CharSequence value) {
    this.PinCode = value;
  }

  /**
   * Gets the value of the 'ItemCode' field.
   * @return The value of the 'ItemCode' field.
   */
  public java.lang.CharSequence getItemCode() {
    return ItemCode;
  }


  /**
   * Sets the value of the 'ItemCode' field.
   * @param value the value to set.
   */
  public void setItemCode(java.lang.CharSequence value) {
    this.ItemCode = value;
  }

  /**
   * Gets the value of the 'ItemDescription' field.
   * @return The value of the 'ItemDescription' field.
   */
  public java.lang.CharSequence getItemDescription() {
    return ItemDescription;
  }


  /**
   * Sets the value of the 'ItemDescription' field.
   * @param value the value to set.
   */
  public void setItemDescription(java.lang.CharSequence value) {
    this.ItemDescription = value;
  }

  /**
   * Gets the value of the 'ItemPrice' field.
   * @return The value of the 'ItemPrice' field.
   */
  public double getItemPrice() {
    return ItemPrice;
  }


  /**
   * Sets the value of the 'ItemPrice' field.
   * @param value the value to set.
   */
  public void setItemPrice(double value) {
    this.ItemPrice = value;
  }

  /**
   * Gets the value of the 'ItemQty' field.
   * @return The value of the 'ItemQty' field.
   */
  public int getItemQty() {
    return ItemQty;
  }


  /**
   * Sets the value of the 'ItemQty' field.
   * @param value the value to set.
   */
  public void setItemQty(int value) {
    this.ItemQty = value;
  }

  /**
   * Gets the value of the 'TotalValue' field.
   * @return The value of the 'TotalValue' field.
   */
  public double getTotalValue() {
    return TotalValue;
  }


  /**
   * Sets the value of the 'TotalValue' field.
   * @param value the value to set.
   */
  public void setTotalValue(double value) {
    this.TotalValue = value;
  }

  /**
   * Creates a new HadoopRecord RecordBuilder.
   * @return A new HadoopRecord RecordBuilder
   */
  public static types.HadoopRecord.Builder newBuilder() {
    return new types.HadoopRecord.Builder();
  }

  /**
   * Creates a new HadoopRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HadoopRecord RecordBuilder
   */
  public static types.HadoopRecord.Builder newBuilder(types.HadoopRecord.Builder other) {
    if (other == null) {
      return new types.HadoopRecord.Builder();
    } else {
      return new types.HadoopRecord.Builder(other);
    }
  }

  /**
   * Creates a new HadoopRecord RecordBuilder by copying an existing HadoopRecord instance.
   * @param other The existing instance to copy.
   * @return A new HadoopRecord RecordBuilder
   */
  public static types.HadoopRecord.Builder newBuilder(types.HadoopRecord other) {
    if (other == null) {
      return new types.HadoopRecord.Builder();
    } else {
      return new types.HadoopRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for HadoopRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HadoopRecord>
    implements org.apache.avro.data.RecordBuilder<HadoopRecord> {

    private java.lang.CharSequence InvoiceNumber;
    private long CreatedTime;
    private java.lang.CharSequence StoreID;
    private java.lang.CharSequence PosID;
    private java.lang.CharSequence CustomerType;
    private java.lang.CharSequence PaymentMethod;
    private java.lang.CharSequence DeliveryType;
    private java.lang.CharSequence City;
    private java.lang.CharSequence State;
    private java.lang.CharSequence PinCode;
    private java.lang.CharSequence ItemCode;
    private java.lang.CharSequence ItemDescription;
    private double ItemPrice;
    private int ItemQty;
    private double TotalValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(types.HadoopRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.InvoiceNumber)) {
        this.InvoiceNumber = data().deepCopy(fields()[0].schema(), other.InvoiceNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[2].schema(), other.StoreID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.PosID)) {
        this.PosID = data().deepCopy(fields()[3].schema(), other.PosID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.CustomerType)) {
        this.CustomerType = data().deepCopy(fields()[4].schema(), other.CustomerType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.PaymentMethod)) {
        this.PaymentMethod = data().deepCopy(fields()[5].schema(), other.PaymentMethod);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.DeliveryType)) {
        this.DeliveryType = data().deepCopy(fields()[6].schema(), other.DeliveryType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.City)) {
        this.City = data().deepCopy(fields()[7].schema(), other.City);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.State)) {
        this.State = data().deepCopy(fields()[8].schema(), other.State);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.PinCode)) {
        this.PinCode = data().deepCopy(fields()[9].schema(), other.PinCode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.ItemCode)) {
        this.ItemCode = data().deepCopy(fields()[10].schema(), other.ItemCode);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.ItemDescription)) {
        this.ItemDescription = data().deepCopy(fields()[11].schema(), other.ItemDescription);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.ItemPrice)) {
        this.ItemPrice = data().deepCopy(fields()[12].schema(), other.ItemPrice);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.ItemQty)) {
        this.ItemQty = data().deepCopy(fields()[13].schema(), other.ItemQty);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.TotalValue)) {
        this.TotalValue = data().deepCopy(fields()[14].schema(), other.TotalValue);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing HadoopRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(types.HadoopRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.InvoiceNumber)) {
        this.InvoiceNumber = data().deepCopy(fields()[0].schema(), other.InvoiceNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[2].schema(), other.StoreID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PosID)) {
        this.PosID = data().deepCopy(fields()[3].schema(), other.PosID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CustomerType)) {
        this.CustomerType = data().deepCopy(fields()[4].schema(), other.CustomerType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.PaymentMethod)) {
        this.PaymentMethod = data().deepCopy(fields()[5].schema(), other.PaymentMethod);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.DeliveryType)) {
        this.DeliveryType = data().deepCopy(fields()[6].schema(), other.DeliveryType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.City)) {
        this.City = data().deepCopy(fields()[7].schema(), other.City);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.State)) {
        this.State = data().deepCopy(fields()[8].schema(), other.State);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.PinCode)) {
        this.PinCode = data().deepCopy(fields()[9].schema(), other.PinCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ItemCode)) {
        this.ItemCode = data().deepCopy(fields()[10].schema(), other.ItemCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ItemDescription)) {
        this.ItemDescription = data().deepCopy(fields()[11].schema(), other.ItemDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.ItemPrice)) {
        this.ItemPrice = data().deepCopy(fields()[12].schema(), other.ItemPrice);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ItemQty)) {
        this.ItemQty = data().deepCopy(fields()[13].schema(), other.ItemQty);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.TotalValue)) {
        this.TotalValue = data().deepCopy(fields()[14].schema(), other.TotalValue);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'InvoiceNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getInvoiceNumber() {
      return InvoiceNumber;
    }


    /**
      * Sets the value of the 'InvoiceNumber' field.
      * @param value The value of 'InvoiceNumber'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setInvoiceNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.InvoiceNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'InvoiceNumber' field has been set.
      * @return True if the 'InvoiceNumber' field has been set, false otherwise.
      */
    public boolean hasInvoiceNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'InvoiceNumber' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearInvoiceNumber() {
      InvoiceNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CreatedTime' field.
      * @return The value.
      */
    public long getCreatedTime() {
      return CreatedTime;
    }


    /**
      * Sets the value of the 'CreatedTime' field.
      * @param value The value of 'CreatedTime'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setCreatedTime(long value) {
      validate(fields()[1], value);
      this.CreatedTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CreatedTime' field has been set.
      * @return True if the 'CreatedTime' field has been set, false otherwise.
      */
    public boolean hasCreatedTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CreatedTime' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearCreatedTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'StoreID' field.
      * @return The value.
      */
    public java.lang.CharSequence getStoreID() {
      return StoreID;
    }


    /**
      * Sets the value of the 'StoreID' field.
      * @param value The value of 'StoreID'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setStoreID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.StoreID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'StoreID' field has been set.
      * @return True if the 'StoreID' field has been set, false otherwise.
      */
    public boolean hasStoreID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'StoreID' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearStoreID() {
      StoreID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'PosID' field.
      * @return The value.
      */
    public java.lang.CharSequence getPosID() {
      return PosID;
    }


    /**
      * Sets the value of the 'PosID' field.
      * @param value The value of 'PosID'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setPosID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.PosID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'PosID' field has been set.
      * @return True if the 'PosID' field has been set, false otherwise.
      */
    public boolean hasPosID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'PosID' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearPosID() {
      PosID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustomerType' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerType() {
      return CustomerType;
    }


    /**
      * Sets the value of the 'CustomerType' field.
      * @param value The value of 'CustomerType'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setCustomerType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.CustomerType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'CustomerType' field has been set.
      * @return True if the 'CustomerType' field has been set, false otherwise.
      */
    public boolean hasCustomerType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'CustomerType' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearCustomerType() {
      CustomerType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'PaymentMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentMethod() {
      return PaymentMethod;
    }


    /**
      * Sets the value of the 'PaymentMethod' field.
      * @param value The value of 'PaymentMethod'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setPaymentMethod(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.PaymentMethod = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'PaymentMethod' field has been set.
      * @return True if the 'PaymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'PaymentMethod' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearPaymentMethod() {
      PaymentMethod = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'DeliveryType' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeliveryType() {
      return DeliveryType;
    }


    /**
      * Sets the value of the 'DeliveryType' field.
      * @param value The value of 'DeliveryType'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setDeliveryType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.DeliveryType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'DeliveryType' field has been set.
      * @return True if the 'DeliveryType' field has been set, false otherwise.
      */
    public boolean hasDeliveryType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'DeliveryType' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearDeliveryType() {
      DeliveryType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'City' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return City;
    }


    /**
      * Sets the value of the 'City' field.
      * @param value The value of 'City'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.City = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'City' field has been set.
      * @return True if the 'City' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'City' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearCity() {
      City = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'State' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return State;
    }


    /**
      * Sets the value of the 'State' field.
      * @param value The value of 'State'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setState(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.State = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'State' field has been set.
      * @return True if the 'State' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'State' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearState() {
      State = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'PinCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPinCode() {
      return PinCode;
    }


    /**
      * Sets the value of the 'PinCode' field.
      * @param value The value of 'PinCode'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setPinCode(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.PinCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'PinCode' field has been set.
      * @return True if the 'PinCode' field has been set, false otherwise.
      */
    public boolean hasPinCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'PinCode' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearPinCode() {
      PinCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemCode() {
      return ItemCode;
    }


    /**
      * Sets the value of the 'ItemCode' field.
      * @param value The value of 'ItemCode'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setItemCode(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.ItemCode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemCode' field has been set.
      * @return True if the 'ItemCode' field has been set, false otherwise.
      */
    public boolean hasItemCode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'ItemCode' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearItemCode() {
      ItemCode = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemDescription() {
      return ItemDescription;
    }


    /**
      * Sets the value of the 'ItemDescription' field.
      * @param value The value of 'ItemDescription'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setItemDescription(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.ItemDescription = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemDescription' field has been set.
      * @return True if the 'ItemDescription' field has been set, false otherwise.
      */
    public boolean hasItemDescription() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'ItemDescription' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearItemDescription() {
      ItemDescription = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemPrice' field.
      * @return The value.
      */
    public double getItemPrice() {
      return ItemPrice;
    }


    /**
      * Sets the value of the 'ItemPrice' field.
      * @param value The value of 'ItemPrice'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setItemPrice(double value) {
      validate(fields()[12], value);
      this.ItemPrice = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemPrice' field has been set.
      * @return True if the 'ItemPrice' field has been set, false otherwise.
      */
    public boolean hasItemPrice() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'ItemPrice' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearItemPrice() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemQty' field.
      * @return The value.
      */
    public int getItemQty() {
      return ItemQty;
    }


    /**
      * Sets the value of the 'ItemQty' field.
      * @param value The value of 'ItemQty'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setItemQty(int value) {
      validate(fields()[13], value);
      this.ItemQty = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemQty' field has been set.
      * @return True if the 'ItemQty' field has been set, false otherwise.
      */
    public boolean hasItemQty() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'ItemQty' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearItemQty() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'TotalValue' field.
      * @return The value.
      */
    public double getTotalValue() {
      return TotalValue;
    }


    /**
      * Sets the value of the 'TotalValue' field.
      * @param value The value of 'TotalValue'.
      * @return This builder.
      */
    public types.HadoopRecord.Builder setTotalValue(double value) {
      validate(fields()[14], value);
      this.TotalValue = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'TotalValue' field has been set.
      * @return True if the 'TotalValue' field has been set, false otherwise.
      */
    public boolean hasTotalValue() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'TotalValue' field.
      * @return This builder.
      */
    public types.HadoopRecord.Builder clearTotalValue() {
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HadoopRecord build() {
      try {
        HadoopRecord record = new HadoopRecord();
        record.InvoiceNumber = fieldSetFlags()[0] ? this.InvoiceNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.CreatedTime = fieldSetFlags()[1] ? this.CreatedTime : (java.lang.Long) defaultValue(fields()[1]);
        record.StoreID = fieldSetFlags()[2] ? this.StoreID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.PosID = fieldSetFlags()[3] ? this.PosID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.CustomerType = fieldSetFlags()[4] ? this.CustomerType : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.PaymentMethod = fieldSetFlags()[5] ? this.PaymentMethod : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.DeliveryType = fieldSetFlags()[6] ? this.DeliveryType : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.City = fieldSetFlags()[7] ? this.City : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.State = fieldSetFlags()[8] ? this.State : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.PinCode = fieldSetFlags()[9] ? this.PinCode : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.ItemCode = fieldSetFlags()[10] ? this.ItemCode : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.ItemDescription = fieldSetFlags()[11] ? this.ItemDescription : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.ItemPrice = fieldSetFlags()[12] ? this.ItemPrice : (java.lang.Double) defaultValue(fields()[12]);
        record.ItemQty = fieldSetFlags()[13] ? this.ItemQty : (java.lang.Integer) defaultValue(fields()[13]);
        record.TotalValue = fieldSetFlags()[14] ? this.TotalValue : (java.lang.Double) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HadoopRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<HadoopRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HadoopRecord>
    READER$ = (org.apache.avro.io.DatumReader<HadoopRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.InvoiceNumber);

    out.writeLong(this.CreatedTime);

    out.writeString(this.StoreID);

    out.writeString(this.PosID);

    out.writeString(this.CustomerType);

    out.writeString(this.PaymentMethod);

    out.writeString(this.DeliveryType);

    if (this.City == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.City);
    }

    if (this.State == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.State);
    }

    if (this.PinCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.PinCode);
    }

    out.writeString(this.ItemCode);

    out.writeString(this.ItemDescription);

    out.writeDouble(this.ItemPrice);

    out.writeInt(this.ItemQty);

    out.writeDouble(this.TotalValue);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.InvoiceNumber = in.readString(this.InvoiceNumber instanceof Utf8 ? (Utf8)this.InvoiceNumber : null);

      this.CreatedTime = in.readLong();

      this.StoreID = in.readString(this.StoreID instanceof Utf8 ? (Utf8)this.StoreID : null);

      this.PosID = in.readString(this.PosID instanceof Utf8 ? (Utf8)this.PosID : null);

      this.CustomerType = in.readString(this.CustomerType instanceof Utf8 ? (Utf8)this.CustomerType : null);

      this.PaymentMethod = in.readString(this.PaymentMethod instanceof Utf8 ? (Utf8)this.PaymentMethod : null);

      this.DeliveryType = in.readString(this.DeliveryType instanceof Utf8 ? (Utf8)this.DeliveryType : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.City = null;
      } else {
        this.City = in.readString(this.City instanceof Utf8 ? (Utf8)this.City : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.State = null;
      } else {
        this.State = in.readString(this.State instanceof Utf8 ? (Utf8)this.State : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.PinCode = null;
      } else {
        this.PinCode = in.readString(this.PinCode instanceof Utf8 ? (Utf8)this.PinCode : null);
      }

      this.ItemCode = in.readString(this.ItemCode instanceof Utf8 ? (Utf8)this.ItemCode : null);

      this.ItemDescription = in.readString(this.ItemDescription instanceof Utf8 ? (Utf8)this.ItemDescription : null);

      this.ItemPrice = in.readDouble();

      this.ItemQty = in.readInt();

      this.TotalValue = in.readDouble();

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.InvoiceNumber = in.readString(this.InvoiceNumber instanceof Utf8 ? (Utf8)this.InvoiceNumber : null);
          break;

        case 1:
          this.CreatedTime = in.readLong();
          break;

        case 2:
          this.StoreID = in.readString(this.StoreID instanceof Utf8 ? (Utf8)this.StoreID : null);
          break;

        case 3:
          this.PosID = in.readString(this.PosID instanceof Utf8 ? (Utf8)this.PosID : null);
          break;

        case 4:
          this.CustomerType = in.readString(this.CustomerType instanceof Utf8 ? (Utf8)this.CustomerType : null);
          break;

        case 5:
          this.PaymentMethod = in.readString(this.PaymentMethod instanceof Utf8 ? (Utf8)this.PaymentMethod : null);
          break;

        case 6:
          this.DeliveryType = in.readString(this.DeliveryType instanceof Utf8 ? (Utf8)this.DeliveryType : null);
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.City = null;
          } else {
            this.City = in.readString(this.City instanceof Utf8 ? (Utf8)this.City : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.State = null;
          } else {
            this.State = in.readString(this.State instanceof Utf8 ? (Utf8)this.State : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.PinCode = null;
          } else {
            this.PinCode = in.readString(this.PinCode instanceof Utf8 ? (Utf8)this.PinCode : null);
          }
          break;

        case 10:
          this.ItemCode = in.readString(this.ItemCode instanceof Utf8 ? (Utf8)this.ItemCode : null);
          break;

        case 11:
          this.ItemDescription = in.readString(this.ItemDescription instanceof Utf8 ? (Utf8)this.ItemDescription : null);
          break;

        case 12:
          this.ItemPrice = in.readDouble();
          break;

        case 13:
          this.ItemQty = in.readInt();
          break;

        case 14:
          this.TotalValue = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










